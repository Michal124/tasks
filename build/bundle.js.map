{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/components/sidebar/Sidebar.svelte","../../src/components/sidebar/SidebarButton.svelte","../../src/components/_dictionaries.ts","../../src/components/icons/List.svelte","../../node_modules/svelte/store/index.mjs","../../src/types.ts","../../src/store.ts","../../src/components/icons/Add.svelte","../../src/app/Sidebar.svelte","../../src/components/icons/Menu.svelte","../../src/components/icons/More.svelte","../../src/app/Nav.svelte","../../src/components/Box.svelte","../../src/components/MenuButton.svelte","../../src/components/slide/SlideParent.svelte","../../src/components/slide/Slide.svelte","../../src/components/Input.svelte","../../src/components/Button.svelte","../../node_modules/uuid/dist/esm-browser/rng.js","../../node_modules/uuid/dist/esm-browser/regex.js","../../node_modules/uuid/dist/esm-browser/validate.js","../../node_modules/uuid/dist/esm-browser/stringify.js","../../node_modules/uuid/dist/esm-browser/v4.js","../../src/components/date/DateDisplay.svelte","../../src/functions.ts","../../src/components/date/Calendar.svelte","../../src/components/swipe/SwipeParent.svelte","../../src/components/swipe/Swipe.svelte","../../src/components/icons/Right.svelte","../../src/components/icons/Left.svelte","../../src/components/date/DateSelect.svelte","../../src/app/Box.svelte","../../src/components/icons/Done.svelte","../../src/components/Todo.svelte","../../src/components/FAB.svelte","../../src/app/Main.svelte","../../src/App.svelte","../../src/main.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { stylesheet } = info;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            info.rules = {};\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true && boolean_attributes.has(name) ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${style_object[key]};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.46.4' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","<script lang=\"ts\">\n  import { createEventDispatcher, onMount } from \"svelte\";\n  const dispatch = createEventDispatcher();\n\n  export let active = false;\n  let width = 1;\n\n  $: pc = width > 500;\n\n  onMount(() => {\n    width = window.innerWidth;\n    window.addEventListener(\"resize\", () => (width = window.innerWidth));\n  });\n</script>\n\n{#if pc}\n  <div class=\"sidebar\">\n    <slot />\n  </div>\n{:else}\n  <div\n    class=\"lock\"\n    style={`${!active && \"pointer-events: none;\"} opacity: ${\n      active ? \"1\" : \"0\"\n    };`}\n    on:click={() => dispatch(\"close\")}\n  />\n  <div class=\"sidebarMobile\" style={`left: ${active ? \"0\" : \"-16rem\"};`}>\n    <slot />\n  </div>\n{/if}\n\n<style lang=\"scss\">\n  @import \"../../styles/colors\";\n  .lock {\n    z-index: 1;\n    position: absolute;\n    top: 0;\n    left: 0;\n    height: 100vh;\n    width: 100vw;\n    background-color: rgba($color: #000000, $alpha: 0.4);\n    transition: opacity 0.5s;\n  }\n  .sidebar,\n  .sidebarMobile {\n    z-index: 2;\n    padding: 1.5rem;\n    background-color: $grey-400;\n    height: 100%;\n    width: 16rem;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    overflow: auto;\n  }\n  .sidebarMobile {\n    position: absolute;\n    top: 0;\n    transition: left 0.5s;\n  }\n</style>\n","<script lang=\"ts\">\n  import { createEventDispatcher } from \"svelte\";\n\n  const dispatch = createEventDispatcher();\n</script>\n\n<button\n  on:click={() => {\n    dispatch(\"click\");\n  }}\n>\n  <slot />\n</button>\n\n<style lang=\"scss\">\n  @import \"../../styles/colors\";\n  button {\n    width: 100%;\n    text-align: left;\n    background-color: transparent;\n    padding: 0.25rem 0.75rem;\n    font-size: 0.889rem;\n    color: $white-200;\n    display: flex;\n    margin-bottom: 0.75rem;\n  }\n</style>\n","export const monthDictionary = {\n    0: \"January\",\n    1: \"February\",\n    2: \"March\",\n    3: \"April\",\n    4: \"May\",\n    5: \"June\",\n    6: \"July\",\n    7: \"August\",\n    8: \"September\",\n    9: \"October\",\n    10: \"November\",\n    11: \"December\",\n};\nexport const colorDictionary = {\n    grey500: \"#1f1f2e\",\n    grey400: \"#29293d\",\n    grey300: \"#33334d\",\n    grey200: \"#3d3d5c\",\n    grey100: \"#47476b\",\n    blue400: \"#1b3a98\",\n    blue300: \"#1f42ad\",\n    blue200: \"#224bc3\",\n    blue100: \"#3c64dd\",\n    white300: \"#5c5c8a\",\n    white200: \"#c2c2d6\",\n    white100: \"#e0e0eb\",\n};\n","<script lang=\"ts\">\n  import { colorDictionary } from \"../_dictionaries\";\n  export let color = colorDictionary.white200;\n</script>\n\n<div class=\"icon\" on:click>\n  <svg\n    width=\"14\"\n    height=\"11\"\n    viewBox=\"0 0 14 11\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M5 1.09415H13M1.00001 1.09415H1.50001M5 5.06223H13M1.00001 5.06223H1.50001M5 9.09415L13 9.03031M1.00001 9.03031H1.50001\"\n      stroke={color}\n      stroke-width=\"2\"\n      stroke-linecap=\"round\"\n    />\n  </svg>\n</div>\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","export var BoxType;\n(function (BoxType) {\n    BoxType[BoxType[\"Null\"] = 0] = \"Null\";\n    BoxType[BoxType[\"Settings\"] = 1] = \"Settings\";\n    BoxType[BoxType[\"AddList\"] = 2] = \"AddList\";\n    BoxType[BoxType[\"AddTask\"] = 3] = \"AddTask\";\n    BoxType[BoxType[\"ChangeTask\"] = 4] = \"ChangeTask\";\n})(BoxType || (BoxType = {}));\n","import { writable } from \"svelte/store\";\nimport { BoxType } from \"./types\";\nconst savedState = JSON.parse(localStorage.getItem(\"state\"));\nexport const _state = writable(savedState || {\n    box: BoxType.Null,\n    lists: [{ id: \"0\", name: \"Home\" }],\n    tasks: [],\n    activeList: \"0\",\n    activeTask: \"\",\n});\n_state.subscribe((x) => localStorage.setItem(\"state\", JSON.stringify(x)));\n","<script lang=\"ts\">\n  import { colorDictionary } from \"../_dictionaries\";\n  export let color = colorDictionary.white200;\n</script>\n\n<div class=\"icon\" on:click>\n  <svg\n    width=\"15\"\n    height=\"15\"\n    viewBox=\"0 0 15 15\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M7.93831 13.9383V1.93829M1.93831 7.93829H13.9383\"\n      stroke={color}\n      stroke-width=\"2\"\n      stroke-linecap=\"round\"\n    />\n  </svg>\n</div>\n","<script lang=\"ts\">\n  import Sidebar from \"../components/sidebar/Sidebar.svelte\";\n  import SidebarButton from \"../components/sidebar/SidebarButton.svelte\";\n  import Home from \"../components/icons/Home.svelte\";\n  import List from \"../components/icons/List.svelte\";\n  import { _state } from \"../store\";\n  import { BoxType, State } from \"../types\";\n  import { createEventDispatcher, onDestroy } from \"svelte\";\n  import Add from \"../components/icons/Add.svelte\";\n\n  let state: State;\n\n  const dispatch = createEventDispatcher();\n  const unsubscriebe = _state.subscribe((x) => (state = x));\n\n  export let active;\n\n  const closeClick = (method: () => any) => {\n    method();\n    dispatch(\"cancel\");\n  };\n\n  onDestroy(unsubscriebe);\n</script>\n\n<Sidebar {active} on:close={() => dispatch(\"cancel\")}>\n  <SidebarButton\n    on:click={() =>\n      closeClick(() => {\n        _state.set({ ...state, box: BoxType.AddList });\n      })}\n  >\n    <Add />\n    <div class=\"text\">New List</div>\n  </SidebarButton>\n  <div class=\"spacer\" />\n  {#each state.lists as list}\n    <SidebarButton\n      on:click={() =>\n        closeClick(() => _state.set({ ...state, activeList: list.id }))}\n    >\n      <List />\n      <div class=\"text\">{list.name}</div>\n    </SidebarButton>\n  {/each}\n</Sidebar>\n\n<style lang=\"scss\">\n  @import \"../styles/colors\";\n  .spacer {\n    margin-top: 1rem;\n  }\n</style>\n","<script lang=\"ts\">\n  import { colorDictionary } from \"../_dictionaries\";\n  export let color = colorDictionary.white200;\n</script>\n\n<div class=\"icon\" on:click>\n  <svg\n    width=\"12\"\n    height=\"11\"\n    viewBox=\"0 0 12 11\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M0.945248 1.9521L10.9434 1.93304M0.944305 9.93304H10.9443M0.944305 5.98309L10.9443 5.89253\"\n      stroke={color}\n      stroke-width=\"1.88861\"\n      stroke-linecap=\"round\"\n    />\n  </svg>\n</div>\n","<script lang=\"ts\">\n  import { colorDictionary } from \"../_dictionaries\";\n  export let color = colorDictionary.white200;\n</script>\n\n<div class=\"icon\" on:click>\n  <svg\n    width=\"3\"\n    height=\"12\"\n    viewBox=\"0 0 3 12\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M1.17988 2.35977C1.83151 2.35977 2.35977 1.83151 2.35977 1.17988C2.35977 0.528252 1.83151 0 1.17988 0C0.528252 0 0 0.528252 0 1.17988C0 1.83151 0.528252 2.35977 1.17988 2.35977Z\"\n      fill={color}\n    />\n    <path\n      d=\"M1.17988 7.17988C1.83151 7.17988 2.35977 6.65163 2.35977 6C2.35977 5.34837 1.83151 4.82012 1.17988 4.82012C0.528252 4.82012 0 5.34837 0 6C0 6.65163 0.528252 7.17988 1.17988 7.17988Z\"\n      fill={color}\n    />\n    <path\n      d=\"M1.17988 12C1.83151 12 2.35977 11.4717 2.35977 10.8201C2.35977 10.1685 1.83151 9.64023 1.17988 9.64023C0.528252 9.64023 0 10.1685 0 10.8201C0 11.4717 0.528252 12 1.17988 12Z\"\n      fill={color}\n    />\n  </svg>\n</div>\n","<script lang=\"ts\">\n  import { createEventDispatcher, onDestroy, onMount } from \"svelte\";\n  import Menu from \"../components/icons/Menu.svelte\";\n  import More from \"../components/icons/More.svelte\";\n  import { _state } from \"../store\";\n  import { BoxType, State } from \"../types\";\n  const dispatch = createEventDispatcher();\n\n  let width = 1;\n\n  $: pc = width > 500;\n\n  let state: State;\n  const unsubscriebe = _state.subscribe((x) => (state = x));\n\n  onMount(() => {\n    width = window.innerWidth;\n    window.addEventListener(\"resize\", () => (width = window.innerWidth));\n  });\n\n  onDestroy(unsubscriebe);\n</script>\n\n<nav>\n  {#if !pc}\n    <Menu on:click={() => dispatch(\"menu\")} />\n  {/if}\n  <div class=\"text\">\n    {state.lists.find((x) => x.id === state.activeList).name}\n  </div>\n  <More on:click={() => _state.set({ ...state, box: BoxType.Settings })} />\n</nav>\n","<script lang=\"ts\">\n  import { createEventDispatcher, onMount } from \"svelte\";\n  const dispatch = createEventDispatcher();\n\n  export let active = false;\n  let width = 501;\n\n  $: pc = width > 500;\n\n  onMount(() => {\n    width = window.innerWidth;\n    window.addEventListener(\"resize\", () => (width = window.innerWidth));\n  });\n</script>\n\n<div\n  class=\"lock\"\n  style={`${!active && \"pointer-events: none;\"} opacity: ${\n    active ? \"1\" : \"0\"\n  };`}\n  on:click={() => dispatch(\"cancel\")}\n/>\n<div\n  class={pc ? \"box\" : \"mobileBox\"}\n  style={`${\n    !pc\n      ? `max-height: ${active ? \"100%\" : \"0\"}; bottom: ${\n          active ? \"0\" : \"-3rem\"\n        };`\n      : \"\"\n  }\n      ${!active && \"pointer-events: none;\"} opacity: ${active ? \"1\" : \"0\"};`}\n>\n  <slot />\n</div>\n\n<style lang=\"scss\">\n  @import \"../styles/colors\";\n  .lock {\n    z-index: 2;\n    position: absolute;\n    top: 0;\n    left: 0;\n    height: 100vh;\n    width: 100vw;\n    background-color: rgba($color: #000000, $alpha: 0.4);\n    transition: opacity 0.5s;\n  }\n  .box,\n  .mobileBox {\n    z-index: 3;\n    padding: 1.5rem;\n    background-color: $grey-400;\n    position: absolute;\n    overflow: hidden;\n  }\n  .box {\n    width: 25rem;\n    border-radius: 1rem;\n    left: 50%;\n    top: 4rem;\n    transform: translateX(-50%);\n    transition: opacity 0.5s;\n  }\n  .mobileBox {\n    left: 0;\n    width: 100vw;\n    transition: opacity 0.5s, max-height 0.5s linear, bottom 0.5s;\n    border-radius: 1rem 1rem 0 0;\n  }\n</style>\n","<button on:click>\n  <slot />\n</button>\n\n<style lang=\"scss\">\n  @import \"../styles/colors\";\n  button {\n    width: 100%;\n    text-align: left;\n    background-color: transparent;\n    padding: 0.25rem 0.75rem;\n    font-size: 0.889rem;\n    color: $white-200;\n    display: flex;\n    margin-bottom: 0.75rem;\n  }\n</style>\n","<script lang=\"ts\">\n  import { onMount } from \"svelte\";\n\n  let height = 1;\n  let transition = false;\n\n  export let watch: any = false;\n  export let position;\n  $: watch, watchChange();\n  $: position, newHeight();\n\n  let slideParent: HTMLDivElement | undefined;\n\n  const watchChange = () => {\n    transition = false;\n    setTimeout(() => {\n      newHeight();\n    }, 100);\n    setTimeout(() => {\n      transition = true;\n    }, 200);\n  };\n\n  const newHeight = () => {\n    if (slideParent && slideParent.children.length > 0) {\n      height =\n        slideParent.children[position].getBoundingClientRect().height / 16;\n    }\n  };\n\n  onMount(() => {\n    setTimeout(() => {\n      newHeight();\n      transition = true;\n    }, 100);\n  });\n</script>\n\n<div\n  bind:this={slideParent}\n  class=\"slideParent\"\n  style={`height: ${height}rem; ${transition && \"transition: height 0.5s;\"}`}\n>\n  <slot />\n</div>\n\n<style lang=\"scss\">\n  .slideParent {\n    width: 100%;\n    margin: auto;\n    overflow: hidden;\n    position: relative;\n  }\n</style>\n","<script lang=\"ts\">\n  import { onMount } from \"svelte\";\n\n  export let i: number;\n  export let position: number;\n  let slide: HTMLDivElement | undefined;\n  let adjusment = 1;\n  let transition = false;\n  let visibility = false;\n  let width = 1;\n\n  $: offset =\n    Math.abs(i - position) >= 1\n      ? i < position\n        ? -1 * (adjusment / 16)\n        : 1 * (adjusment / 16)\n      : (i - position) * (adjusment / 16);\n  $: visibility = Math.abs(offset) < 1;\n  $: pc = width > 500;\n\n  onMount(() => {\n    if (slide) {\n      adjusment = slide.getBoundingClientRect().width;\n    }\n    setTimeout(() => (transition = true), 100);\n    width = window.innerWidth;\n    window.addEventListener(\"resize\", () => (width = window.innerWidth));\n  });\n</script>\n\n<div\n  bind:this={slide}\n  class=\"slide\"\n  style={`left: ${offset}rem; ${\n    transition && \"transition: left 0.5s, opacity 0.5s;\"\n  } ${visibility ? \"opacity: 1;\" : \"opacity: 0;\"}; ${!pc && \"bottom: 0;\"}`}\n>\n  <slot />\n</div>\n\n<style lang=\"scss\">\n  .slide {\n    position: absolute;\n    margin: auto;\n    width: 100%;\n  }\n</style>\n","<script lang=\"ts\">\n  import { createEventDispatcher, onMount } from \"svelte\";\n\n  export let startValue = \"\";\n  export let name: string;\n  export let type: \"text\" | \"password\";\n\n  let input: HTMLInputElement | undefined;\n\n  const dispatch = createEventDispatcher();\n\n  onMount(() => {\n    if (input) {\n      input.value = startValue;\n    }\n  });\n</script>\n\n<label for={name}><slot />:</label>\n<input\n  bind:this={input}\n  id={name}\n  {type}\n  on:input={(e) => {\n    // @ts-ignore\n    dispatch(\"change\", e.target.value);\n  }}\n/>\n\n<style lang=\"scss\">\n  @import \"../styles/colors\";\n  label {\n    text-align: left;\n    display: block;\n    font-size: 0.79rem;\n    color: $white-200;\n    margin-bottom: 0.25rem;\n  }\n  input {\n    background-color: transparent;\n    font-size: 0.889rem;\n    padding: 0.5rem 0.75rem;\n    margin-bottom: 1rem;\n    border: 1px solid $grey-100;\n    border-radius: 0.375rem;\n    width: 100%;\n    &:focus-visible {\n      border-color: $blue-100;\n    }\n  }\n</style>\n","<script lang=\"ts\">\n  export let primary: boolean = false;\n</script>\n\n<button on:click class={primary && \"primary\"}>\n  <slot />\n</button>\n\n<style lang=\"scss\">\n  @import \"../styles/colors\";\n  button {\n    margin: 0.5rem 0.25rem 1px 0;\n    padding: 0.5rem 0.75rem;\n    border-radius: 0.375rem;\n    font-size: 0.79rem;\n    background-color: $grey-100;\n    &.primary {\n      background-color: $blue-200;\n    }\n    &:hover,\n    &:focus-visible {\n      background-color: $grey-200;\n      &.primary {\n        background-color: $blue-300;\n      }\n    }\n    &:active {\n      background-color: $grey-300;\n      &.primary {\n        background-color: $blue-400;\n      }\n    }\n  }\n</style>\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","<script lang=\"ts\">\n  import type { Date } from \"../../types\";\n\n  export let date: Date;\n</script>\n\n<div class=\"timeDisplay\">\n  <p>\n    <slot />\n  </p>\n  <div class=\"time\" on:click>\n    {(\"0\" + date.day).slice(-2)}.{(\"0\" + (date.month + 1)).slice(-2)}. {date.year}\n  </div>\n</div>\n\n<style lang=\"scss\">\n  @import \"../../styles/colors\";\n  .timeDisplay {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 1rem;\n    margin-right: 1px;\n    p {\n      font-size: 0.889rem;\n    }\n    .time {\n      font-size: 0.889rem;\n      color: $white-200;\n      user-select: none;\n    }\n  }\n</style>\n","export const getMonth = (selectedMonth, change) => {\n    if (selectedMonth.month + change < 0) {\n        return {\n            month: 11,\n            year: selectedMonth.year - 1,\n        };\n    }\n    else if (selectedMonth.month + change > 11) {\n        return {\n            month: 0,\n            year: selectedMonth.year + 1,\n        };\n    }\n    else {\n        return { month: selectedMonth.month + change, year: selectedMonth.year };\n    }\n};\nexport const getDaysInMonth = (month, year) => {\n    return new Date(year, month + 1, 0).getDate();\n};\nexport const getDay = (selectedDay, change) => {\n    if (selectedDay.day + change < 1) {\n        const month = getMonth({ month: selectedDay.month, year: selectedDay.year }, -1);\n        return {\n            day: getDaysInMonth(month.month, month.year),\n            month: month.month,\n            year: month.year,\n        };\n    }\n    else if (selectedDay.day + change >\n        getDaysInMonth(selectedDay.month, selectedDay.year)) {\n        const month = getMonth({ month: selectedDay.month, year: selectedDay.year }, 1);\n        return {\n            day: 1,\n            month: month.month,\n            year: month.year,\n        };\n    }\n    else {\n        return Object.assign(Object.assign({}, selectedDay), { day: selectedDay.day + change });\n    }\n};\nexport const getDimensions = (element) => {\n    const computedStyle = getComputedStyle(element);\n    const dimensions = element.getBoundingClientRect();\n    const width = (dimensions.width -\n        (parseFloat(computedStyle.paddingLeft) +\n            parseFloat(computedStyle.paddingRight))) /\n        16;\n    const height = (dimensions.height -\n        (parseFloat(computedStyle.paddingTop) +\n            parseFloat(computedStyle.paddingBottom))) /\n        16;\n    return { width, height };\n};\n","<script lang=\"ts\">\n  import { createEventDispatcher } from \"svelte\";\n  import { getDaysInMonth } from \"../../functions\";\n\n  export let selectedDay: { day: number; month: number; year: number };\n  export let selectedMonth: { month: number; year: number };\n\n  const dispatch = createEventDispatcher();\n\n  export let position;\n  let odlPos = position;\n\n  const getMonthDate = (selectedMonth: { month: number; year: number }) => {\n    let result = [[]];\n\n    let week = 0;\n    let weekDay = 0;\n    let offset = 0;\n\n    for (\n      let i = 0;\n      i < getDaysInMonth(selectedMonth.month, selectedMonth.year) + offset;\n      i++\n    ) {\n      if (new Date(selectedMonth.year, selectedMonth.month).getDay() > i + 1) {\n        result[week].push(\" \");\n        offset++;\n      } else {\n        result[week].push(i - offset + 1);\n      }\n\n      weekDay++;\n      if (weekDay > 6) {\n        weekDay = 0;\n        week++;\n        result.push([]);\n      }\n    }\n\n    return result;\n  };\n\n  $: monthData = getMonthDate(selectedMonth);\n</script>\n\n<div class=\"parent\">\n  <table class=\"calendar\">\n    <thead>\n      <tr>\n        <th>Mo</th>\n        <th>Tu</th>\n        <th>We</th>\n        <th>Th</th>\n        <th>Fr</th>\n        <th>Sa</th>\n        <th>Su</th>\n      </tr>\n    </thead>\n    <tbody>\n      {#each monthData as week}\n        <tr>\n          {#each week as day}\n            <td\n              on:mousedown={() => {\n                odlPos = position;\n              }}\n              on:mouseup={() => {\n                if (Math.abs(odlPos - position) === 0) {\n                  dispatch(\"selectDay\", {\n                    day,\n                    month: selectedMonth.month,\n                    year: selectedMonth.year,\n                  });\n                }\n              }}\n              on:touchstart={() => {\n                odlPos = position;\n              }}\n              on:touchend={() => {\n                if (Math.abs(odlPos - position) === 0.2) {\n                  dispatch(\"selectDay\", {\n                    day,\n                    month: selectedMonth.month,\n                    year: selectedMonth.year,\n                  });\n                }\n              }}\n              class={JSON.stringify({\n                day,\n                month: selectedMonth.month,\n                year: selectedMonth.year,\n              }) === JSON.stringify(selectedDay) && \"selected\"}>{day}</td\n            >\n          {/each}\n        </tr>\n      {/each}\n    </tbody>\n  </table>\n</div>\n\n<style lang=\"scss\">\n  @import \"../../styles/colors\";\n  .parent {\n    height: 16.925rem;\n    .calendar {\n      table-layout: fixed;\n      font-weight: 400;\n      padding: 0 0.5rem;\n      text-align: center;\n      margin-bottom: 1rem;\n      user-select: none;\n      tbody td {\n        padding: 0.5rem;\n        &.selected {\n          background-color: $blue-200;\n          border-radius: 50%;\n        }\n      }\n      thead th {\n        color: $white-200;\n        padding: 0 0.5rem 0.5rem 0.5rem;\n        font-size: 0.79rem;\n      }\n    }\n  }\n</style>\n","<script lang=\"ts\">\n  import { createEventDispatcher, onMount } from \"svelte\";\n  const dispatch = createEventDispatcher();\n\n  let width = 1;\n  let height = 1;\n  let moving = false;\n  let movingPosition: number;\n  let max = 1;\n\n  export let position;\n\n  let swipeParent: HTMLDivElement | undefined;\n\n  const move = (e: { screenX: number }) => {\n    if (moving) {\n      const move = (movingPosition - e.screenX) / (width * 16);\n      if (position + move >= 0) {\n        if (position + move <= max) position += move;\n        else position = max;\n      } else position = 0;\n      dispatch(\"position\", position);\n      movingPosition = e.screenX;\n    }\n  };\n\n  const stop = () => {\n    moving = false;\n    position = Math.round(position);\n    dispatch(\"position\", position);\n  };\n\n  const newDimensions = () => {\n    setTimeout(() => {\n      console.log(swipeParent);\n      const dimensions = swipeParent.children[0].getBoundingClientRect();\n      width = dimensions.width / 16;\n      height = dimensions.height / 16;\n    }, 100);\n  };\n\n  onMount(() => {\n    if (swipeParent) {\n      newDimensions();\n      max = swipeParent.children.length - 1;\n      window.addEventListener(\"resize\", newDimensions);\n    }\n    document.addEventListener(\"mousemove\", (e) => {\n      move(e);\n    });\n    document.addEventListener(\"mouseup\", () => {\n      stop();\n    });\n    document.addEventListener(\"touchmove\", (e) => {\n      move(e.targetTouches[0]);\n    });\n    document.addEventListener(\"touchend\", () => {\n      stop();\n    });\n  });\n</script>\n\n<div\n  bind:this={swipeParent}\n  class=\"swipeParent\"\n  on:touchstart={(e) => {\n    const touch = e.targetTouches[0];\n    moving = true;\n    movingPosition = touch.screenX;\n  }}\n  on:mousedown={(e) => {\n    moving = true;\n    movingPosition = e.screenX;\n  }}\n  style={`width: ${width}rem; height: ${height}rem`}\n>\n  <slot />\n</div>\n\n<style lang=\"scss\">\n  .swipeParent {\n    margin: auto;\n    overflow: hidden;\n    position: relative;\n  }\n</style>\n","<script lang=\"ts\">\n  import { onMount } from \"svelte\";\n\n  export let i: number;\n  export let position: number;\n  let oldPosition = position;\n  let smooth = false;\n  let swipe: HTMLDivElement | undefined;\n  let adjusment = 1;\n\n  $: {\n    smooth =\n      Math.abs(oldPosition - position) > 0.1 &&\n      Math.abs(oldPosition - position) <= 0.5;\n    oldPosition = position;\n  }\n\n  $: offset = (i - position) * (adjusment / 16);\n  $: visibility = Math.abs(offset) < 0.75;\n\n  const newAdjusment = () => {\n    setTimeout(() => {\n      adjusment = swipe.getBoundingClientRect().width;\n    }, 100);\n  };\n\n  onMount(() => {\n    if (swipe) {\n      newAdjusment();\n      window.addEventListener(\"resize\", newAdjusment);\n    }\n  });\n</script>\n\n<div\n  bind:this={swipe}\n  class=\"swipe\"\n  style={`left: ${offset}rem; ${smooth && \"transition: left 0.5s;\"} ${\n    !visibility && \"visibility: hidden;\"\n  }`}\n>\n  <slot />\n</div>\n\n<style lang=\"scss\">\n  .swipe {\n    position: absolute;\n    width: max-content;\n  }\n</style>\n","<script lang=\"ts\">\n  import { colorDictionary } from \"../_dictionaries\";\n  export let color = colorDictionary.white200;\n</script>\n\n<div class=\"icon\" on:click>\n  <svg\n    width=\"7\"\n    height=\"11\"\n    viewBox=\"0 0 7 11\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M1.03149 9.03146L5.03149 5.03146L1.03149 1.03146\"\n      stroke={color}\n      stroke-width=\"2.06293\"\n      stroke-linecap=\"round\"\n    />\n  </svg>\n</div>\n","<script lang=\"ts\">\n  import { colorDictionary } from \"../_dictionaries\";\n  export let color = colorDictionary.white200;\n</script>\n\n<div class=\"icon\" on:click>\n  <svg\n    width=\"7\"\n    height=\"11\"\n    viewBox=\"0 0 7 11\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M6.03149 1.03146L2.03149 5.03146L6.03149 9.03146\"\n      stroke={color}\n      stroke-width=\"2.06293\"\n      stroke-linecap=\"round\"\n    />\n  </svg>\n</div>\n","<script lang=\"ts\">\n  import Calendar from \"./Calendar.svelte\";\n  import Button from \"../Button.svelte\";\n  import SwipeParent from \"../swipe/SwipeParent.svelte\";\n  import Swipe from \"../swipe/Swipe.svelte\";\n  import { createEventDispatcher } from \"svelte\";\n  import { monthDictionary } from \"../_dictionaries\";\n  import Right from \"../icons/Right.svelte\";\n  import Left from \"../icons/Left.svelte\";\n  import type { Date } from \"../../types\";\n  import { getMonth } from \"../../functions\";\n\n  let calendarPositon = 1;\n\n  const dispatch = createEventDispatcher();\n\n  let selectedDay: Date = {\n    day: new Date().getDate(),\n    month: new Date().getMonth(),\n    year: new Date().getFullYear(),\n  };\n  let selectedMonth = {\n    month: new Date().getMonth(),\n    year: new Date().getFullYear(),\n  };\n</script>\n\n<div class=\"month\">\n  <Left on:click={() => (selectedMonth = getMonth(selectedMonth, -1))} />\n  <div\n    on:click={() =>\n      (selectedMonth = {\n        month: new Date().getMonth(),\n        year: new Date().getFullYear(),\n      })}\n  >\n    {monthDictionary[selectedMonth.month]}\n    {selectedMonth.year}\n  </div>\n  <Right on:click={() => (selectedMonth = getMonth(selectedMonth, 1))} />\n</div>\n<SwipeParent\n  on:position={(e) => {\n    calendarPositon = e.detail;\n    if (Math.abs(calendarPositon - 1) === 1) {\n      selectedMonth = getMonth(selectedMonth, calendarPositon - 1);\n      calendarPositon = 1;\n    }\n  }}\n  position={calendarPositon}\n>\n  {#each Array(3) as _, i}\n    <Swipe {i} position={calendarPositon}>\n      <Calendar\n        position={calendarPositon}\n        on:selectDay={(e) => (selectedDay = e.detail)}\n        {selectedDay}\n        selectedMonth={getMonth(selectedMonth, i - 1)}\n      />\n    </Swipe>\n  {/each}\n</SwipeParent>\n<Button on:click={() => dispatch(\"cancel\")}>Cancel</Button>\n<Button on:click={() => dispatch(\"selected\", selectedDay)} primary\n  >Confirm</Button\n>\n\n<style lang=\"scss\">\n  @import \"../../styles/colors\";\n  .month {\n    user-select: none;\n    color: $white-200;\n    font-size: 1rem;\n    text-align: center;\n    margin-bottom: 1rem;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    div {\n      width: 12rem;\n    }\n  }\n</style>\n","<script lang=\"ts\">\n  import Box from \"../components/Box.svelte\";\n  import { _state } from \"../store\";\n  import { BoxType, State } from \"../types\";\n  import { onDestroy } from \"svelte\";\n  import MenuButton from \"../components/MenuButton.svelte\";\n  import SlideParent from \"../components/slide/SlideParent.svelte\";\n  import Slide from \"../components/slide/Slide.svelte\";\n  import Input from \"../components/Input.svelte\";\n  import Button from \"../components/Button.svelte\";\n  import { v4 as uuidv4 } from \"uuid\";\n  import DateDisplay from \"../components/date/DateDisplay.svelte\";\n  import DateSelect from \"../components/date/DateSelect.svelte\";\n  let position = 0;\n\n  let formStorage = [];\n\n  const date = new Date();\n  formStorage[1] = {\n    day: date.getDate(),\n    month: date.getMonth(),\n    year: date.getFullYear(),\n  };\n\n  $: active = state.box !== BoxType.Null;\n  let state: State;\n\n  const unsubscriebe = _state.subscribe((x) => {\n    if (state) {\n      if (x.box !== state.box) {\n        position = 0;\n      }\n      if (x.box === BoxType.AddTask) {\n        formStorage[1] = {\n          day: date.getDate(),\n          month: date.getMonth(),\n          year: date.getFullYear(),\n        };\n      } else if (x.box === BoxType.ChangeTask) {\n        const activeTask = x.tasks.find((y) => y.id === x.activeTask);\n        formStorage[0] = activeTask.name;\n        formStorage[1] = activeTask.date;\n      }\n    }\n    state = x;\n  });\n\n  const closeClick = (method?: () => any) => {\n    if (method) {\n      method();\n    }\n    _state.set({ ...state, box: BoxType.Null });\n  };\n\n  onDestroy(unsubscriebe);\n</script>\n\n<Box {active} on:cancel={() => closeClick()}>\n  <SlideParent {position} watch={state.box}>\n    {#if state.box === BoxType.Settings}\n      <Slide i={0} {position}>\n        <MenuButton on:click={() => (position = 0)}>Delete all Tasks</MenuButton\n        >\n        {#if state.activeList !== \"0\"}\n          <MenuButton on:click={() => (position = 1)}>Change name</MenuButton>\n          <MenuButton on:click={() => (position = 2)}>Delete</MenuButton>\n        {/if}\n      </Slide>\n      <Slide i={1} {position}>\n        <Input\n          name=\"ChangeName\"\n          type=\"text\"\n          on:change={(e) => (formStorage[0] = e.detail)}>List name</Input\n        >\n        <Button on:click={() => (position = 0)}>Cancel</Button>\n        <Button\n          primary\n          on:click={() =>\n            closeClick(() => {\n              const result = [...state.lists];\n              const remove = result.findIndex((x) => x.id === state.activeList);\n              const newList = { id: result[remove].id, name: formStorage[0] };\n              result.splice(remove, 1, newList);\n              _state.set({ ...state, lists: result, activeList: newList.id });\n            })}>Change list</Button\n        >\n      </Slide>\n      <Slide i={2} {position}>\n        <p>Delete list</p>\n        <Button on:click={() => (position = 0)}>Cancel</Button>\n        <Button\n          primary\n          on:click={() =>\n            closeClick(() => {\n              const result = [...state.lists];\n              result.splice(\n                result.findIndex((x) => x.id === state.activeList),\n                1\n              );\n              _state.set({ ...state, lists: result, activeList: \"0\" });\n            })}>Confirm</Button\n        >\n      </Slide>\n    {:else if state.box === BoxType.AddList}\n      <Slide i={0} {position}>\n        <Input\n          name=\"AddList\"\n          type=\"text\"\n          on:change={(e) => (formStorage[0] = e.detail)}>List name</Input\n        >\n        <Button\n          primary\n          on:click={() =>\n            closeClick(() => {\n              const id = uuidv4();\n              _state.set({\n                ...state,\n                lists: [...state.lists, { id, name: formStorage[0] }],\n                activeList: id,\n              });\n            })}>Add list</Button\n        >\n      </Slide>\n    {:else if state.box === BoxType.AddTask}\n      <Slide i={0} {position}>\n        <Input\n          name=\"AddTask\"\n          type=\"text\"\n          on:change={(e) => (formStorage[0] = e.detail)}>Task</Input\n        >\n        <DateDisplay date={formStorage[1]} on:click={() => (position = 1)} />\n        <Button\n          primary\n          on:click={() =>\n            closeClick(() => {\n              const id = uuidv4();\n              _state.set({\n                ...state,\n                tasks: [\n                  ...state.tasks,\n                  {\n                    parent: state.activeList,\n                    id,\n                    name: formStorage[0],\n                    date: formStorage[1],\n                    done: false,\n                  },\n                ],\n              });\n            })}>Add Task</Button\n        >\n      </Slide>\n      <Slide i={1} {position}>\n        <DateSelect\n          on:cancel={() => (position = 0)}\n          on:selected={(e) => {\n            formStorage[1] = e.detail;\n            position = 0;\n          }}\n        />\n      </Slide>\n    {:else if state.box === BoxType.ChangeTask}\n      <Slide i={0} {position}>\n        <Input\n          startValue={formStorage[0]}\n          name=\"AddTask\"\n          type=\"text\"\n          on:change={(e) => (formStorage[0] = e.detail)}>Task</Input\n        >\n        <DateDisplay date={formStorage[1]} on:click={() => (position = 1)} />\n        <Button\n          primary\n          on:click={() =>\n            closeClick(() => {\n              const result = [...state.tasks];\n              const remove = result.findIndex((x) => x.id === state.activeTask);\n              const newTask = {\n                parent: result[remove].parent,\n                id: result[remove].id,\n                name: formStorage[0],\n                date: formStorage[1],\n                done: false,\n              };\n              result.splice(remove, 1, newTask);\n              _state.set({ ...state, tasks: result });\n            })}>Change</Button\n        >\n      </Slide>\n      <Slide i={1} {position}>\n        <DateSelect\n          on:cancel={() => (position = 0)}\n          on:selected={(e) => {\n            formStorage[1] = e.detail;\n            position = 0;\n          }}\n        />\n      </Slide>\n    {/if}\n  </SlideParent>\n</Box>\n","<script lang=\"ts\">\n  import { colorDictionary } from \"../_dictionaries\";\n  export let color = colorDictionary.white200;\n</script>\n\n<div class=\"icon\" on:click>\n  <svg\n    width=\"11\"\n    height=\"8\"\n    viewBox=\"0 0 11 8\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M1.42481 4.33875L3.79308 6.70702L9.42481 1.07529\"\n      stroke={color}\n      stroke-width=\"2\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n  </svg>\n</div>\n","<script>\n  import { createEventDispatcher } from \"svelte\";\n  import Done from \"./icons/Done.svelte\";\n\n  export let done;\n\n  const dispatch = createEventDispatcher();\n</script>\n\n<div class=\"todo\">\n  <div\n    on:click={() => {\n      dispatch(\"done\");\n    }}\n    class={`status ${done ? \"done\" : \"\"}`}\n  >\n    {#if done}\n      <Done />\n    {/if}\n  </div>\n  <slot />\n</div>\n\n<style lang=\"scss\">\n  @import \"../styles/colors\";\n  .todo {\n    text-align: left;\n    display: flex;\n    align-items: center;\n    margin-bottom: 0.5rem;\n    .status {\n      user-select: none;\n      width: 1rem;\n      height: 1rem;\n      border-radius: 50%;\n      background-color: transparent;\n      margin-right: 1rem;\n      outline: 1px solid $grey-100;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      &.done {\n        outline-color: $blue-200;\n        background-color: $blue-200;\n      }\n    }\n  }\n</style>\n","<button on:click>\n  <slot />\n</button>\n\n<style lang=\"scss\">\n  @import \"../styles/colors\";\n  button {\n    z-index: 0;\n    position: absolute;\n    bottom: 1.5rem;\n    right: 1.5rem;\n    display: flex;\n    padding: 0.75rem 1rem;\n    border-radius: 1.5rem;\n    font-size: 0.889rem;\n    background-color: $blue-200;\n    &:hover,\n    &:focus-visible {\n      background-color: $blue-300;\n    }\n    &:active {\n      background-color: $blue-400;\n    }\n  }\n</style>\n","<script lang=\"ts\">\n  import Todo from \"../components/Todo.svelte\";\n  import Fab from \"../components/FAB.svelte\";\n  import Add from \"../components/icons/Add.svelte\";\n  import { _state } from \"../store\";\n  import { onDestroy, onMount } from \"svelte\";\n  import { BoxType, State } from \"../types\";\n  import SwipeParent from \"../components/swipe/SwipeParent.svelte\";\n  import { getDay, getDimensions } from \"../functions\";\n  import Swipe from \"../components/swipe/Swipe.svelte\";\n  import Left from \"../components/icons/Left.svelte\";\n  import Right from \"../components/icons/Right.svelte\";\n  import { monthDictionary } from \"../components/_dictionaries\";\n\n  let position = 1;\n  let state: State;\n  const unsubscriebe = _state.subscribe((x) => (state = x));\n\n  let selectedDay = {\n    day: new Date().getDate(),\n    month: new Date().getMonth(),\n    year: new Date().getFullYear(),\n  };\n\n  let width = 1;\n  let height = 1;\n  let tasksDiv: HTMLElement | undefined;\n\n  $: tasks = state.tasks.filter((x) => x.parent === state.activeList);\n\n  const newDimensions = () => {\n    setTimeout(() => {\n      const dimensions = getDimensions(tasksDiv);\n      width = dimensions.width;\n      height = dimensions.height;\n    }, 50);\n  };\n\n  onMount(() => {\n    if (tasksDiv) {\n      newDimensions();\n      window.addEventListener(\"resize\", newDimensions);\n    }\n  });\n\n  onDestroy(unsubscriebe);\n</script>\n\n<main>\n  <div class=\"day\">\n    <Left on:click={() => (selectedDay = getDay(selectedDay, -1))} />\n    <div\n      on:click={() =>\n        (selectedDay = {\n          day: new Date().getDate(),\n          month: new Date().getMonth(),\n          year: new Date().getFullYear(),\n        })}\n    >\n      {selectedDay.day}\n      {monthDictionary[selectedDay.month]}\n      {selectedDay.year}\n    </div>\n    <Right on:click={() => (selectedDay = getDay(selectedDay, 1))} />\n  </div>\n  <div class=\"tasks\" bind:this={tasksDiv}>\n    <SwipeParent\n      {position}\n      on:position={(e) => {\n        position = e.detail;\n        if (Math.abs(position - 1) === 1) {\n          selectedDay = getDay(selectedDay, position - 1);\n          position = 1;\n        }\n      }}\n    >\n      {#each Array(3) as _, i}\n        <Swipe {i} {position}>\n          <div\n            style={`width: ${width}rem; height: ${height}rem; padding: 0 1rem 3rem 1rem; overflow: auto;`}\n          >\n            {#each tasks.filter((x) => JSON.stringify(x.date) === JSON.stringify(getDay(selectedDay, i - 1))) as task}\n              <Todo\n                on:done={() => {\n                  const result = [...state.tasks];\n                  const remove = result.findIndex((x) => x.id === task.id);\n                  const newTask = { ...task, done: !task.done };\n                  result.splice(remove, 1, newTask);\n                  _state.set({ ...state, tasks: result });\n                  setTimeout(() => {\n                    const result = [...state.tasks];\n                    result.splice(\n                      result.findIndex((x) => x.id === task.id),\n                      1\n                    );\n                    _state.set({ ...state, tasks: result });\n                  }, 250);\n                }}\n                done={task.done}\n              >\n                <div\n                  on:click={() =>\n                    _state.set({\n                      ...state,\n                      box: BoxType.ChangeTask,\n                      activeTask: task.id,\n                    })}\n                >\n                  {task.name}\n                </div>\n              </Todo>\n            {/each}\n          </div>\n        </Swipe>\n      {/each}\n    </SwipeParent>\n    <Fab on:click={() => _state.set({ ...state, box: BoxType.AddTask })}\n      ><Add />\n      <div class=\"text\">Add Task</div></Fab\n    >\n  </div>\n</main>\n\n<style lang=\"scss\">\n  @import \"../styles/colors\";\n  .day {\n    user-select: none;\n    color: $white-200;\n    font-size: 1rem;\n    text-align: center;\n    margin-bottom: 1rem;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    div {\n      width: 16rem;\n    }\n  }\n  .tasks {\n    flex: 1;\n    min-height: 0;\n    padding: 1.5rem 0 1.5rem 1.5rem;\n  }\n</style>\n","<script lang=\"ts\">\n  import Sidebar from \"./app/Sidebar.svelte\";\n  import Nav from \"./app/Nav.svelte\";\n  import Box from \"./app/Box.svelte\";\n  import { _state } from \"./store\";\n  import { onMount } from \"svelte\";\n  import Main from \"./app/Main.svelte\";\n\n  let sidebar = false;\n\n  onMount(() => {\n    if (\"serviceWorker\" in navigator) {\n      window.addEventListener(\"load\", () =>\n        navigator.serviceWorker.register(\"./serviceWorker.js\")\n      );\n    }\n  });\n</script>\n\n<Nav on:menu={() => (sidebar = true)} />\n<div class=\"content\">\n  <Sidebar active={sidebar} on:cancel={() => (sidebar = false)} />\n  <Main />\n</div>\n<Box />\n","import App from \"./App.svelte\";\nimport \"./styles/global.scss\";\nconst app = new App({\n    target: document.body,\n});\nexport default app;\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","create_slot","definition","ctx","$$scope","slot_ctx","get_slot_context","tar","src","k","assign","slice","get_slot_changes","dirty","lets","undefined","merged","len","Math","max","length","i","update_slot_base","slot","slot_definition","slot_changes","get_slot_context_fn","slot_context","p","get_all_dirty_from_scope","null_to_empty","value","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","d","element","name","document","createElement","svg_element","createElementNS","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","removeAttribute","getAttribute","setAttribute","set_data","wholeText","current_component","set_current_component","component","get_current_component","Error","onMount","$$","on_mount","push","onDestroy","on_destroy","createEventDispatcher","type","detail","callbacks","bubbles","e","createEvent","initCustomEvent","custom_event","call","bubble","this","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","seen_callbacks","Set","flushidx","flush","saved_component","update","pop","callback","has","add","clear","fragment","before_update","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","create_component","mount_component","customElement","m","new_on_destroy","map","filter","destroy_component","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","context","Map","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","$on","index","indexOf","splice","$set","$$props","obj","$$set","keys","dispatch","active","width","window","innerWidth","pc","monthDictionary","colorDictionary","grey500","grey400","grey300","grey200","grey100","blue400","blue300","blue200","blue100","white300","white200","white100","color","subscriber_queue","BoxType","_state","start","stop","subscribers","set","new_value","run_queue","subscriber","subscribe","invalidate","size","writable","JSON","parse","localStorage","getItem","box","Null","lists","id","tasks","activeList","activeTask","x","setItem","stringify","state","unsubscriebe","closeClick","method","AddList","list","find","Settings","slideParent","height","transition","watch","position","newHeight","getBoundingClientRect","setTimeout","slide","adjusment","visibility","offset","abs","input","startValue","primary","getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","validate","uuid","REGEX","test","byteToHex","toString","substr","v4","buf","rnds","random","arr","arguments","toLowerCase","TypeError","day","month","year","date","getMonth","selectedMonth","change","getDaysInMonth","Date","getDate","getDay","selectedDay","odlPos","monthData","result","week","weekDay","getMonthDate","movingPosition","swipeParent","moving","move","screenX","round","newDimensions","console","log","dimensions","targetTouches","touch","swipe","oldPosition","smooth","newAdjusment","calendarPositon","getFullYear","AddTask","ChangeTask","formStorage","y","remove","findIndex","newList","uuidv4","parent","done","newTask","tasksDiv","computedStyle","getComputedStyle","parseFloat","paddingLeft","paddingRight","paddingTop","paddingBottom","getDimensions","task","sidebar","navigator","serviceWorker","register","body"],"mappings":"gCAAA,SAASA,KAgBT,SAASC,EAAIC,GACT,OAAOA,IAEX,SAASC,IACL,OAAOC,OAAOC,OAAO,MAEzB,SAASC,EAAQC,GACbA,EAAIC,QAAQP,GAEhB,SAASQ,EAAYC,GACjB,MAAwB,mBAAVA,EAElB,SAASC,EAAeC,EAAGC,GACvB,OAAOD,GAAKA,EAAIC,GAAKA,EAAID,IAAMC,GAAOD,GAAkB,iBAANA,GAAgC,mBAANA,EAoChF,SAASE,EAAYC,EAAYC,EAAKC,EAASf,GAC3C,GAAIa,EAAY,CACZ,MAAMG,EAAWC,EAAiBJ,EAAYC,EAAKC,EAASf,GAC5D,OAAOa,EAAW,GAAGG,IAG7B,SAASC,EAAiBJ,EAAYC,EAAKC,EAASf,GAChD,OAAOa,EAAW,IAAMb,EAtE5B,SAAgBkB,EAAKC,GAEjB,IAAK,MAAMC,KAAKD,EACZD,EAAIE,GAAKD,EAAIC,GACjB,OAAOF,EAmEDG,CAAON,EAAQD,IAAIQ,QAAST,EAAW,GAAGb,EAAGc,KAC7CC,EAAQD,IAElB,SAASS,EAAiBV,EAAYE,EAASS,EAAOxB,GAClD,GAAIa,EAAW,IAAMb,EAAI,CACrB,MAAMyB,EAAOZ,EAAW,GAAGb,EAAGwB,IAC9B,QAAsBE,IAAlBX,EAAQS,MACR,OAAOC,EAEX,GAAoB,iBAATA,EAAmB,CAC1B,MAAME,EAAS,GACTC,EAAMC,KAAKC,IAAIf,EAAQS,MAAMO,OAAQN,EAAKM,QAChD,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAKI,GAAK,EAC1BL,EAAOK,GAAKjB,EAAQS,MAAMQ,GAAKP,EAAKO,GAExC,OAAOL,EAEX,OAAOZ,EAAQS,MAAQC,EAE3B,OAAOV,EAAQS,MAEnB,SAASS,EAAiBC,EAAMC,EAAiBrB,EAAKC,EAASqB,EAAcC,GACzE,GAAID,EAAc,CACd,MAAME,EAAerB,EAAiBkB,EAAiBrB,EAAKC,EAASsB,GACrEH,EAAKK,EAAED,EAAcF,IAO7B,SAASI,EAAyBzB,GAC9B,GAAIA,EAAQD,IAAIiB,OAAS,GAAI,CACzB,MAAMP,EAAQ,GACRO,EAAShB,EAAQD,IAAIiB,OAAS,GACpC,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAQC,IACxBR,EAAMQ,IAAM,EAEhB,OAAOR,EAEX,OAAQ,EAiCZ,SAASiB,EAAcC,GACnB,OAAgB,MAATA,EAAgB,GAAKA,EAgKhC,SAASC,EAAOC,EAAQC,GACpBD,EAAOE,YAAYD,GAoDvB,SAASE,EAAOH,EAAQC,EAAMG,GAC1BJ,EAAOK,aAAaJ,EAAMG,GAAU,MAUxC,SAASE,EAAOL,GACZA,EAAKM,WAAWC,YAAYP,GAEhC,SAASQ,EAAaC,EAAYC,GAC9B,IAAK,IAAIvB,EAAI,EAAGA,EAAIsB,EAAWvB,OAAQC,GAAK,EACpCsB,EAAWtB,IACXsB,EAAWtB,GAAGwB,EAAED,GAG5B,SAASE,EAAQC,GACb,OAAOC,SAASC,cAAcF,GAiBlC,SAASG,EAAYH,GACjB,OAAOC,SAASG,gBAAgB,6BAA8BJ,GAElE,SAASK,EAAKC,GACV,OAAOL,SAASM,eAAeD,GAEnC,SAASE,IACL,OAAOH,EAAK,KAEhB,SAASI,IACL,OAAOJ,EAAK,IAEhB,SAASK,EAAOvB,EAAMwB,EAAOC,EAASC,GAElC,OADA1B,EAAK2B,iBAAiBH,EAAOC,EAASC,GAC/B,IAAM1B,EAAK4B,oBAAoBJ,EAAOC,EAASC,GA8B1D,SAASG,EAAK7B,EAAM8B,EAAWjC,GACd,MAATA,EACAG,EAAK+B,gBAAgBD,GAChB9B,EAAKgC,aAAaF,KAAejC,GACtCG,EAAKiC,aAAaH,EAAWjC,GAqLrC,SAASqC,EAAShB,EAAMC,GACpBA,EAAO,GAAKA,EACRD,EAAKiB,YAAchB,IACnBD,EAAKC,KAAOA,GAuTpB,IAAIiB,EACJ,SAASC,EAAsBC,GAC3BF,EAAoBE,EAExB,SAASC,IACL,IAAKH,EACD,MAAM,IAAII,MAAM,oDACpB,OAAOJ,EAKX,SAASK,EAAQtF,GACboF,IAAwBG,GAAGC,SAASC,KAAKzF,GAK7C,SAAS0F,EAAU1F,GACfoF,IAAwBG,GAAGI,WAAWF,KAAKzF,GAE/C,SAAS4F,IACL,MAAMT,EAAYC,IAClB,MAAO,CAACS,EAAMC,KACV,MAAMC,EAAYZ,EAAUI,GAAGQ,UAAUF,GACzC,GAAIE,EAAW,CAGX,MAAM1B,EA/OlB,SAAsBwB,EAAMC,EAAQE,GAAU,GAC1C,MAAMC,EAAItC,SAASuC,YAAY,eAE/B,OADAD,EAAEE,gBAAgBN,EAAMG,GAAS,EAAOF,GACjCG,EA4OeG,CAAaP,EAAMC,GACjCC,EAAUzE,QAAQhB,SAAQN,IACtBA,EAAGqG,KAAKlB,EAAWd,QAoBnC,SAASiC,EAAOnB,EAAWd,GACvB,MAAM0B,EAAYZ,EAAUI,GAAGQ,UAAU1B,EAAMwB,MAC3CE,GAEAA,EAAUzE,QAAQhB,SAAQN,GAAMA,EAAGqG,KAAKE,KAAMlC,KAItD,MAAMmC,EAAmB,GAEnBC,EAAoB,GACpBC,EAAmB,GACnBC,EAAkB,GAClBC,EAAmBC,QAAQC,UACjC,IAAIC,GAAmB,EAWvB,SAASC,EAAoBhH,GACzB0G,EAAiBjB,KAAKzF,GAuB1B,MAAMiH,EAAiB,IAAIC,IAC3B,IAAIC,EAAW,EACf,SAASC,IACL,MAAMC,EAAkBpC,EACxB,EAAG,CAGC,KAAOkC,EAAWX,EAAiBzE,QAAQ,CACvC,MAAMoD,EAAYqB,EAAiBW,GACnCA,IACAjC,EAAsBC,GACtBmC,EAAOnC,EAAUI,IAKrB,IAHAL,EAAsB,MACtBsB,EAAiBzE,OAAS,EAC1BoF,EAAW,EACJV,EAAkB1E,QACrB0E,EAAkBc,KAAlBd,GAIJ,IAAK,IAAIzE,EAAI,EAAGA,EAAI0E,EAAiB3E,OAAQC,GAAK,EAAG,CACjD,MAAMwF,EAAWd,EAAiB1E,GAC7BiF,EAAeQ,IAAID,KAEpBP,EAAeS,IAAIF,GACnBA,KAGRd,EAAiB3E,OAAS,QACrByE,EAAiBzE,QAC1B,KAAO4E,EAAgB5E,QACnB4E,EAAgBY,KAAhBZ,GAEJI,GAAmB,EACnBE,EAAeU,QACfzC,EAAsBmC,GAE1B,SAASC,EAAO/B,GACZ,GAAoB,OAAhBA,EAAGqC,SAAmB,CACtBrC,EAAG+B,SACHlH,EAAQmF,EAAGsC,eACX,MAAMrG,EAAQ+D,EAAG/D,MACjB+D,EAAG/D,MAAQ,EAAE,GACb+D,EAAGqC,UAAYrC,EAAGqC,SAASrF,EAAEgD,EAAGzE,IAAKU,GACrC+D,EAAGuC,aAAaxH,QAAQ0G,IAiBhC,MAAMe,EAAW,IAAIb,IACrB,IAAIc,EACJ,SAASC,IACLD,EAAS,CACLE,EAAG,EACHC,EAAG,GACH5F,EAAGyF,GAGX,SAASI,IACAJ,EAAOE,GACR9H,EAAQ4H,EAAOG,GAEnBH,EAASA,EAAOzF,EAEpB,SAAS8F,EAAcC,EAAOC,GACtBD,GAASA,EAAMtG,IACf+F,EAASS,OAAOF,GAChBA,EAAMtG,EAAEuG,IAGhB,SAASE,EAAeH,EAAOC,EAAOrF,EAAQsE,GAC1C,GAAIc,GAASA,EAAMI,EAAG,CAClB,GAAIX,EAASN,IAAIa,GACb,OACJP,EAASL,IAAIY,GACbN,EAAOG,EAAE1C,MAAK,KACVsC,EAASS,OAAOF,GACZd,IACItE,GACAoF,EAAM9E,EAAE,GACZgE,QAGRc,EAAMI,EAAEH,IA6oBhB,SAASI,EAAiBL,GACtBA,GAASA,EAAMH,IAKnB,SAASS,EAAgBzD,EAAWvC,EAAQI,EAAQ6F,GAChD,MAAMjB,SAAEA,EAAQpC,SAAEA,EAAQG,WAAEA,EAAUmC,aAAEA,GAAiB3C,EAAUI,GACnEqC,GAAYA,EAASkB,EAAElG,EAAQI,GAC1B6F,GAED7B,GAAoB,KAChB,MAAM+B,EAAiBvD,EAASwD,IAAIjJ,GAAKkJ,OAAO1I,GAC5CoF,EACAA,EAAWF,QAAQsD,GAKnB3I,EAAQ2I,GAEZ5D,EAAUI,GAAGC,SAAW,MAGhCsC,EAAaxH,QAAQ0G,GAEzB,SAASkC,EAAkB/D,EAAW5B,GAClC,MAAMgC,EAAKJ,EAAUI,GACD,OAAhBA,EAAGqC,WACHxH,EAAQmF,EAAGI,YACXJ,EAAGqC,UAAYrC,EAAGqC,SAASpE,EAAED,GAG7BgC,EAAGI,WAAaJ,EAAGqC,SAAW,KAC9BrC,EAAGzE,IAAM,IAGjB,SAASqI,EAAWhE,EAAWnD,IACI,IAA3BmD,EAAUI,GAAG/D,MAAM,KACnBgF,EAAiBf,KAAKN,GArzBrB4B,IACDA,GAAmB,EACnBH,EAAiBwC,KAAKhC,IAqzBtBjC,EAAUI,GAAG/D,MAAM6H,KAAK,IAE5BlE,EAAUI,GAAG/D,MAAOQ,EAAI,GAAM,IAAO,GAAMA,EAAI,GAEnD,SAASsH,EAAKnE,EAAWZ,EAASgF,EAAUC,EAAiBC,EAAWC,EAAOC,EAAenI,EAAQ,EAAE,IACpG,MAAMoI,EAAmB3E,EACzBC,EAAsBC,GACtB,MAAMI,EAAKJ,EAAUI,GAAK,CACtBqC,SAAU,KACV9G,IAAK,KAEL4I,MAAAA,EACApC,OAAQxH,EACR2J,UAAAA,EACAI,MAAO5J,IAEPuF,SAAU,GACVG,WAAY,GACZmE,cAAe,GACfjC,cAAe,GACfC,aAAc,GACdiC,QAAS,IAAIC,IAAIzF,EAAQwF,UAAYH,EAAmBA,EAAiBrE,GAAGwE,QAAU,KAEtFhE,UAAW9F,IACXuB,MAAAA,EACAyI,YAAY,EACZC,KAAM3F,EAAQ3B,QAAUgH,EAAiBrE,GAAG2E,MAEhDP,GAAiBA,EAAcpE,EAAG2E,MAClC,IAAIC,GAAQ,EAkBZ,GAjBA5E,EAAGzE,IAAMyI,EACHA,EAASpE,EAAWZ,EAAQmF,OAAS,IAAI,CAAC1H,EAAGoI,KAAQC,KACnD,MAAM3H,EAAQ2H,EAAKtI,OAASsI,EAAK,GAAKD,EAOtC,OANI7E,EAAGzE,KAAO2I,EAAUlE,EAAGzE,IAAIkB,GAAIuD,EAAGzE,IAAIkB,GAAKU,MACtC6C,EAAG0E,YAAc1E,EAAGsE,MAAM7H,IAC3BuD,EAAGsE,MAAM7H,GAAGU,GACZyH,GACAhB,EAAWhE,EAAWnD,IAEvBoI,KAET,GACN7E,EAAG+B,SACH6C,GAAQ,EACR/J,EAAQmF,EAAGsC,eAEXtC,EAAGqC,WAAW4B,GAAkBA,EAAgBjE,EAAGzE,KAC/CyD,EAAQ3B,OAAQ,CAChB,GAAI2B,EAAQ+F,QAAS,CAEjB,MAAMC,EA91ClB,SAAkB9G,GACd,OAAO+G,MAAMC,KAAKhH,EAAQiH,YA61CJC,CAASpG,EAAQ3B,QAE/B2C,EAAGqC,UAAYrC,EAAGqC,SAASgD,EAAEL,GAC7BA,EAAMjK,QAAQ4C,QAIdqC,EAAGqC,UAAYrC,EAAGqC,SAASO,IAE3B5D,EAAQsG,OACRxC,EAAclD,EAAUI,GAAGqC,UAC/BgB,EAAgBzD,EAAWZ,EAAQ3B,OAAQ2B,EAAQvB,OAAQuB,EAAQsE,eAEnEzB,IAEJlC,EAAsB0E,GAkD1B,MAAMkB,EACFC,WACI7B,EAAkB3C,KAAM,GACxBA,KAAKwE,SAAWjL,EAEpBkL,IAAInF,EAAM2B,GACN,MAAMzB,EAAaQ,KAAKhB,GAAGQ,UAAUF,KAAUU,KAAKhB,GAAGQ,UAAUF,GAAQ,IAEzE,OADAE,EAAUN,KAAK+B,GACR,KACH,MAAMyD,EAAQlF,EAAUmF,QAAQ1D,IACjB,IAAXyD,GACAlF,EAAUoF,OAAOF,EAAO,IAGpCG,KAAKC,GA73DT,IAAkBC,EA83DN/E,KAAKgF,QA93DCD,EA83DkBD,EA73DG,IAA5BnL,OAAOsL,KAAKF,GAAKvJ,UA83DhBwE,KAAKhB,GAAG0E,YAAa,EACrB1D,KAAKgF,MAAMF,GACX9E,KAAKhB,GAAG0E,YAAa,oLCr5DlBnJ,MAAU,oCACnBA,KAAS,IAAM,2EAIwBA,KAAS,IAAM,qBAP1DiC,kBAOAA,wFALajC,MAAU,oCACnBA,KAAS,IAAM,qHAIwBA,KAAS,IAAM,sQAX1DiC,iPADGjC,yWAbG2K,EAAW7F,eAEN8F,GAAS,KAChBC,EAAQ,EAIZrG,YACEqG,EAAQC,OAAOC,YACfD,OAAOpH,iBAAiB,kBAAiBmH,EAAQC,OAAOC,sIAJvDC,EAAKH,EAAQ,uBAkBEF,EAAS,4NCnB7B1I,yQAHQ0I,EAAW7F,oEAKf6F,EAAS,2ECRN,MAAMM,GAAkB,CAC3B,EAAG,UACH,EAAG,WACH,EAAG,QACH,EAAG,QACH,EAAG,MACH,EAAG,OACH,EAAG,OACH,EAAG,SACH,EAAG,YACH,EAAG,UACH,GAAI,WACJ,GAAI,YAEKC,GAAkB,CAC3BC,QAAS,UACTC,QAAS,UACTC,QAAS,UACTC,QAAS,UACTC,QAAS,UACTC,QAAS,UACTC,QAAS,UACTC,QAAS,UACTC,QAAS,UACTC,SAAU,UACVC,SAAU,UACVC,SAAU,qOCXA9L,qNAVdiC,SACEJ,OAOEA,iEAEU7B,oEAbD+L,EAAQb,GAAgBW,qKCCrC,MAAMG,GAAmB,GCHlB,IAAIC,IACX,SAAWA,GACPA,EAAQA,EAAc,KAAI,GAAK,OAC/BA,EAAQA,EAAkB,SAAI,GAAK,WACnCA,EAAQA,EAAiB,QAAI,GAAK,UAClCA,EAAQA,EAAiB,QAAI,GAAK,UAClCA,EAAQA,EAAoB,WAAI,GAAK,aALzC,CAMGA,KAAYA,GAAU,KCLzB,MACaC,GFgBb,SAAkBtK,EAAOuK,EAAQnN,GAC7B,IAAIoN,EACJ,MAAMC,EAAc,IAAIjG,IACxB,SAASkG,EAAIC,GACT,GAAI5M,EAAeiC,EAAO2K,KACtB3K,EAAQ2K,EACJH,GAAM,CACN,MAAMI,GAAaR,GAAiB/K,OACpC,IAAK,MAAMwL,KAAcJ,EACrBI,EAAW,KACXT,GAAiBrH,KAAK8H,EAAY7K,GAEtC,GAAI4K,EAAW,CACX,IAAK,IAAItL,EAAI,EAAGA,EAAI8K,GAAiB/K,OAAQC,GAAK,EAC9C8K,GAAiB9K,GAAG,GAAG8K,GAAiB9K,EAAI,IAEhD8K,GAAiB/K,OAAS,IAuB1C,MAAO,CAAEqL,IAAAA,EAAK9F,OAlBd,SAAgBtH,GACZoN,EAAIpN,EAAG0C,KAiBW8K,UAftB,SAAmBzN,EAAK0N,EAAa3N,GACjC,MAAMyN,EAAa,CAACxN,EAAK0N,GAMzB,OALAN,EAAYzF,IAAI6F,GACS,IAArBJ,EAAYO,OACZR,EAAOD,EAAMG,IAAQtN,GAEzBC,EAAI2C,GACG,KACHyK,EAAY3E,OAAO+E,GACM,IAArBJ,EAAYO,OACZR,IACAA,EAAO,SEnDDS,CADHC,KAAKC,MAAMC,aAAaC,QAAQ,WACN,CACzCC,IAAKjB,GAAQkB,KACbC,MAAO,CAAC,CAAEC,GAAI,IAAKzK,KAAM,SACzB0K,MAAO,GACPC,WAAY,IACZC,WAAY,wJCOFxN,qNAVdiC,SACEJ,OAOEA,iEAEU7B,oEAbD+L,EAAQb,GAAgBW,8FDQrCK,GAAOQ,WAAWe,GAAMT,aAAaU,QAAQ,QAASZ,KAAKa,UAAUF,kSEuBjExL,+IASqBjC,KAAK4C,8HAAxBX,wDAAmBjC,KAAK4C,sjBANrB5C,KAAMoN,2BAAXnM,oOADFgB,8JACOjC,KAAMoN,cAAXnM,+HAAAA,iFAAAA,0gBA1BE2M,QAEEjD,EAAW7F,IACX+I,EAAe3B,GAAOQ,WAAWe,OAAOG,EAAQH,gBAE3C7C,WAELkD,EAAcC,IAClBA,IACApD,EAAS,WAGX/F,EAAUiJ,kEAMNC,QACE5B,GAAOI,QAASsB,EAAOV,IAAKjB,GAAQ+B,gBAUpCF,OAAiB5B,GAAOI,QAASsB,EAAOL,WAAYU,EAAKZ,WAd/B1C,EAAS,gRCV7B3K,2NAVdiC,SACEJ,OAOEA,iEAEU7B,oEAbD+L,EAAQb,GAAgBW,mdCazB7L,kNAIAA,0MAIAA,6JAlBZiC,SACEJ,OAOEA,OAIAA,OAIAA,+DANQ7B,sBAIAA,sBAIAA,oEArBC+L,EAAQb,GAAgBW,uYC0BhC7L,KAAMoN,MAAMc,WAAuCtL,WAJhD5C,wJADRiC,+BAIEJ,gDAHM7B,qHAIHA,KAAMoN,MAAMc,WAAuCtL,yJAtBhD+H,EAAW7F,QAMb8I,EAJA/C,EAAQ,QAKNgD,EAAe3B,GAAOQ,WAAWe,OAAOG,EAAQH,KAEtDjJ,YACEqG,EAAQC,OAAOC,YACfD,OAAOpH,iBAAiB,kBAAiBmH,EAAQC,OAAOC,iBAG1DnG,EAAUiJ,6CAVP7C,EAAKH,EAAQ,mBAeQF,EAAS,QAGZ8C,GAAMA,EAAEJ,KAAOO,EAAML,eAEpBrB,GAAOI,QAASsB,EAAOV,IAAKjB,GAAQkC,8PCb/CnO,MAAU,oCACnBA,KAAS,IAAM,wBAKVA,KAAK,MAAQ,iDAEjBA,KAIG,kBAHeA,KAAS,OAAS,gBAC/BA,KAAS,IAAM,sBAIhBA,MAAU,oCAAoCA,KAAS,IAAM,gBAhBtEiC,kBAOAA,0FALajC,MAAU,oCACnBA,KAAS,IAAM,8GAKVA,KAAK,MAAQ,qEAEjBA,KAIG,kBAHeA,KAAS,OAAS,gBAC/BA,KAAS,IAAM,sBAIhBA,MAAU,oCAAoCA,KAAS,IAAM,+KA7B9D2K,EAAW7F,eAEN8F,GAAS,KAChBC,EAAQ,IAIZrG,YACEqG,EAAQC,OAAOC,YACfD,OAAOpH,iBAAiB,kBAAiBmH,EAAQC,OAAOC,sIAJvDC,EAAKH,EAAQ,uBAaAF,EAAS,6NCpB3B1I,8jBCyCoBjC,YAAcA,MAAc,sCAHhDiC,6IAGoBjC,YAAcA,MAAc,oJA9B1CoO,6BARAC,EAAS,EACTC,GAAa,SAENC,GAAa,eACbC,WAgBLC,OACAL,GAAeA,EAAYvE,SAAS5I,OAAS,OAC/CoN,EACED,EAAYvE,SAAS2E,GAAUE,wBAAwBL,OAAS,YAItE7J,QACEmK,iBACEF,QACAH,GAAa,KACZ,uJApBHA,GAAa,GACbK,iBACEF,MACC,KACHE,qBACEL,GAAa,KACZ,qBAXQG,4DA8BFL,6PCNKpO,YACdA,MAAc,0CACZA,KAAa,cAAgB,mBAAmBA,MAAM,wBAL5DiC,8IAGkBjC,YACdA,MAAc,0CACZA,KAAa,cAAgB,mBAAmBA,MAAM,2IA9BtD4O,gCAFO1N,eACAsN,KAEPK,EAAY,EACZP,GAAa,EACbQ,GAAa,EACbjE,EAAQ,SAWZrG,QACMoK,OACFC,EAAYD,EAAMF,wBAAwB7D,OAE5C8D,oBAAkBL,GAAa,IAAO,SACtCzD,EAAQC,OAAOC,YACfD,OAAOpH,iBAAiB,kBAAiBmH,EAAQC,OAAOC,yJAfvDgE,EACDhO,KAAKiO,IAAI9N,EAAIsN,IAAa,EACtBtN,EAAIsN,EACIK,EAAY,IAAjB,EACIA,EAAY,GAAjB,EACgBA,EAAY,IAA7B3N,EAAIsN,sBACRM,EAAa/N,KAAKiO,IAAID,GAAU,uBAChC/D,EAAKH,EAAQ,qEAaL+D,4MCba,kCAAd5O,6CAGNA,6DAHNiC,wCACAA,qJADYjC,0BAGNA,gKAdAiP,yCAJOC,EAAa,YACbtM,WACAmC,WAIL4F,EAAW7F,IAEjBN,QACMyK,OACFA,EAAMrN,MAAQsN,6MAOPD,eAGA9J,IAETwF,EAAS,SAAUxF,EAAErD,OAAOF,0NCrBR5B,MAAW,sCAAnCiC,yJAAwBjC,MAAW,qLAHtBmP,GAAmB,wMCEhC,IAAIC,GACAC,GAAQ,IAAIC,WAAW,IACZ,SAASC,KAEtB,IAAKH,MAGHA,GAAoC,oBAAXI,QAA0BA,OAAOJ,iBAAmBI,OAAOJ,gBAAgBK,KAAKD,SAA+B,oBAAbE,UAAgE,mBAA7BA,SAASN,iBAAkCM,SAASN,gBAAgBK,KAAKC,WAGrO,MAAM,IAAInL,MAAM,4GAIpB,OAAO6K,GAAgBC,WCjBV,sHCEf,SAASM,GAASC,GAChB,MAAuB,iBAATA,GAAqBC,GAAMC,KAAKF,GCKhD,IAFA,IAAIG,GAAY,GAEP7O,GAAI,EAAGA,GAAI,MAAOA,GACzB6O,GAAUpL,MAAMzD,GAAI,KAAO8O,SAAS,IAAIC,OAAO,ICNjD,SAASC,GAAGzM,EAAS0M,EAAKpB,GAExB,IAAIqB,GADJ3M,EAAUA,GAAW,IACF4M,SAAW5M,EAAQ8L,KAAOA,MAK7C,GAHAa,EAAK,GAAe,GAAVA,EAAK,GAAY,GAC3BA,EAAK,GAAe,GAAVA,EAAK,GAAY,IAEvBD,EAAK,CACPpB,EAASA,GAAU,EAEnB,IAAK,IAAI7N,EAAI,EAAGA,EAAI,KAAMA,EACxBiP,EAAIpB,EAAS7N,GAAKkP,EAAKlP,GAGzB,OAAOiP,EAGT,ODRF,SAAmBG,GACjB,IAAIvB,EAASwB,UAAUtP,OAAS,QAAsBL,IAAjB2P,UAAU,GAAmBA,UAAU,GAAK,EAG7EX,GAAQG,GAAUO,EAAIvB,EAAS,IAAMgB,GAAUO,EAAIvB,EAAS,IAAMgB,GAAUO,EAAIvB,EAAS,IAAMgB,GAAUO,EAAIvB,EAAS,IAAM,IAAMgB,GAAUO,EAAIvB,EAAS,IAAMgB,GAAUO,EAAIvB,EAAS,IAAM,IAAMgB,GAAUO,EAAIvB,EAAS,IAAMgB,GAAUO,EAAIvB,EAAS,IAAM,IAAMgB,GAAUO,EAAIvB,EAAS,IAAMgB,GAAUO,EAAIvB,EAAS,IAAM,IAAMgB,GAAUO,EAAIvB,EAAS,KAAOgB,GAAUO,EAAIvB,EAAS,KAAOgB,GAAUO,EAAIvB,EAAS,KAAOgB,GAAUO,EAAIvB,EAAS,KAAOgB,GAAUO,EAAIvB,EAAS,KAAOgB,GAAUO,EAAIvB,EAAS,MAAMyB,cAMzf,IAAKb,GAASC,GACZ,MAAMa,UAAU,+BAGlB,OAAOb,ECNAjC,CAAUyC,iDCTb,IAAMpQ,KAAK0Q,KAAKlQ,OAAO,SAAM,KAAOR,KAAK2Q,MAAQ,IAAInQ,OAAO,QAAMR,KAAK4Q,oHAA7C,gBAAqC,gIALrE3O,SACEJ,6BAGAA,2KACI,IAAM7B,KAAK0Q,KAAKlQ,OAAO,kCAAM,KAAOR,KAAK2Q,MAAQ,IAAInQ,OAAO,iCAAMR,KAAK4Q,oJARhEC,+LCHN,MAAMC,GAAW,CAACC,EAAeC,IAChCD,EAAcJ,MAAQK,EAAS,EACxB,CACHL,MAAO,GACPC,KAAMG,EAAcH,KAAO,GAG1BG,EAAcJ,MAAQK,EAAS,GAC7B,CACHL,MAAO,EACPC,KAAMG,EAAcH,KAAO,GAIxB,CAAED,MAAOI,EAAcJ,MAAQK,EAAQJ,KAAMG,EAAcH,MAG7DK,GAAiB,CAACN,EAAOC,IAC3B,IAAIM,KAAKN,EAAMD,EAAQ,EAAG,GAAGQ,UAE3BC,GAAS,CAACC,EAAaL,KAChC,GAAIK,EAAYX,IAAMM,EAAS,EAAG,CAC9B,MAAML,EAAQG,GAAS,CAAEH,MAAOU,EAAYV,MAAOC,KAAMS,EAAYT,OAAS,GAC9E,MAAO,CACHF,IAAKO,GAAeN,EAAMA,MAAOA,EAAMC,MACvCD,MAAOA,EAAMA,MACbC,KAAMD,EAAMC,MAGf,GAAIS,EAAYX,IAAMM,EACvBC,GAAeI,EAAYV,MAAOU,EAAYT,MAAO,CACrD,MAAMD,EAAQG,GAAS,CAAEH,MAAOU,EAAYV,MAAOC,KAAMS,EAAYT,MAAQ,GAC7E,MAAO,CACHF,IAAK,EACLC,MAAOA,EAAMA,MACbC,KAAMD,EAAMC,MAIhB,OAAOxR,OAAOmB,OAAOnB,OAAOmB,OAAO,GAAI8Q,GAAc,CAAEX,IAAKW,EAAYX,IAAMM,sJCoDrBhR,qHAJ5C8M,KAAKa,WACV+C,IAAA1Q,MACA2Q,MAAO3Q,KAAc2Q,MACrBC,KAAM5Q,KAAc4Q,SACf9D,KAAKa,UAAU3N,OAAgB,uCA7BxCiC,iKA6BqDjC,iCAJ5C8M,KAAKa,WACV+C,IAAA1Q,MACA2Q,MAAO3Q,KAAc2Q,MACrBC,KAAM5Q,KAAc4Q,SACf9D,KAAKa,UAAU3N,OAAgB,kGA9BnCA,2BAALiB,uGADJgB,wFACSjC,cAALiB,4HAAAA,8DAFCjB,0BAALiB,miBAdRgB,SACEJ,OACEA,cAWAA,iFACS7B,aAALiB,+HAAAA,6EAvDKoQ,oBACAN,WAELpG,EAAW7F,iBAEN0J,KACP8C,EAAS9C,+KAgCV+C,EA9BmBR,CAAAA,QAChBS,OAEAC,EAAO,EACPC,EAAU,EACV3C,EAAS,UAGP7N,EAAI,EACRA,EAAI+P,GAAeF,EAAcJ,MAAOI,EAAcH,MAAQ7B,EAC9D7N,QAEQgQ,KAAKH,EAAcH,KAAMG,EAAcJ,OAAOS,SAAWlQ,EAAI,GACnEsQ,EAAOC,GAAM9M,KAAK,KAClBoK,KAEAyC,EAAOC,GAAM9M,KAAKzD,EAAI6N,EAAS,GAGjC2C,IACIA,EAAU,IACZA,EAAU,EACVD,IACAD,EAAO7M,iBAIJ6M,GAGMG,CAAaZ,2BAsBdO,EAAS9C,QAG2B,IAAhCzN,KAAKiO,IAAIsC,EAAS9C,IACpB7D,EAAS,aACP+F,IAAAA,EACAC,MAAOI,EAAcJ,MACrBC,KAAMG,EAAcH,iBAKxBU,EAAS9C,QAG2B,KAAhCzN,KAAKiO,IAAIsC,EAAS9C,IACpB7D,EAAS,aACP+F,IAAAA,EACAC,MAAOI,EAAcJ,MACrBC,KAAMG,EAAcH,sRCTrB5Q,oBAAqBA,mBAZxCiC,wMAYmBjC,oBAAqBA,2KAxEhC2K,EAAW7F,QAKb8M,EAKAC,EARAhH,EAAQ,EACRwD,EAAS,EACTyD,GAAS,EAET9Q,EAAM,YAECwN,WAILuD,EAAQ5M,OACR2M,SACIC,GAAQH,EAAiBzM,EAAE6M,UAAoB,GAARnH,OACzC2D,EAAWuD,GAAQ,EACjBvD,EAAWuD,GAAQ/Q,EAAKwN,GAAYuD,EACnCvD,EAAWxN,EACXwN,EAAW,GAClB7D,EAAS,WAAY6D,OACrBoD,EAAiBzM,EAAE6M,WAIjB5F,WACJ0F,GAAS,OACTtD,EAAWzN,KAAKkR,MAAMzD,IACtB7D,EAAS,WAAY6D,IAGjB0D,OACJvD,iBACEwD,QAAQC,IAAIP,SACNQ,EAAaR,EAAYhI,SAAS,GAAG6E,4BAC3C7D,EAAQwH,EAAWxH,MAAQ,QAC3BwD,EAASgE,EAAWhE,OAAS,MAC5B,MAGL7J,QACMqN,IACFK,IACAlR,EAAM6Q,EAAYhI,SAAS5I,OAAS,EACpC6J,OAAOpH,iBAAiB,SAAUwO,IAEpCrP,SAASa,iBAAiB,aAAcyB,IACtC4M,EAAK5M,MAEPtC,SAASa,iBAAiB,gBACxB0I,OAEFvJ,SAASa,iBAAiB,aAAcyB,IACtC4M,EAAK5M,EAAEmN,cAAc,OAEvBzP,SAASa,iBAAiB,iBACxB0I,yJAMOyF,eAEK1M,UACRoN,EAAQpN,EAAEmN,cAAc,OAC9BR,GAAS,OACTF,EAAiBW,EAAMP,UAEV7M,QACb2M,GAAS,OACTF,EAAiBzM,EAAE6M,gPCnCLhS,YAAcA,MAAU,6BACrCA,MAAc,iCAJnBiC,8IAGkBjC,YAAcA,MAAU,6BACrCA,MAAc,oJA/BbwS,gCAJOtR,eACAsN,KACPiE,EAAcjE,EACdkE,GAAS,EAET7D,EAAY,QAYV8D,OACJhE,qBACEE,EAAY2D,EAAM9D,wBAAwB7D,SACzC,aAGLrG,QACMgO,IACFG,IACA7H,OAAOpH,iBAAiB,SAAUiP,+IAlBpCD,EACE3R,KAAKiO,IAAIyD,EAAcjE,GAAY,IACnCzN,KAAKiO,IAAIyD,EAAcjE,IAAa,QACtCiE,EAAcjE,wBAGbO,EAA2BF,EAAY,IAA7B3N,EAAIsN,sBACdM,EAAa/N,KAAKiO,IAAID,GAAU,mEAiBxByD,iPCpBCxS,yNAVdiC,SACEJ,OAOEA,iEAEU7B,oEAbD+L,EAAQb,GAAgBW,wTCavB7L,yNAVdiC,SACEJ,OAOEA,iEAEU7B,oEAbD+L,EAAQb,GAAgBW,gSCoDnB7L,oCAGK8Q,GAAS9Q,KAAeA,MAAI,6HAHjCA,sDAGK8Q,GAAS9Q,KAAeA,MAAI,sKAL1BA,+HAAAA,8JADhB0J,MAAM,wBAAXzI,wNAAKyI,MAAM,WAAXzI,+HAAAA,8DAAAA,wJAWwC,+EAEzC,qGA5BEgK,GAAgBjL,KAAc2Q,YAC9B3Q,KAAc4Q,2GAYP5Q,4dAtBZiC,4BAEEJ,oKAOGoJ,GAAgBjL,KAAc2Q,qCAC9B3Q,KAAc4Q,6CAYP5Q,yeArCN4S,EAAkB,QAEhBjI,EAAW7F,QAEbuM,GACFX,SAASQ,MAAOC,UAChBR,WAAWO,MAAOJ,WAClBF,UAAUM,MAAO2B,eAEf9B,GACFJ,WAAWO,MAAOJ,WAClBF,UAAUM,MAAO2B,sCAKI9B,EAAgBD,GAASC,GAAgB,YAG3DA,GACCJ,WAAWO,MAAOJ,WAClBF,UAAUM,MAAO2B,wBAMC9B,EAAgBD,GAASC,EAAe,IAgB3C5L,OAAOkM,EAAclM,EAAEH,QAb9BG,QACZyN,EAAkBzN,EAAEH,QACkB,IAAlCjE,KAAKiO,IAAI4D,EAAkB,SAC7B7B,EAAgBD,GAASC,EAAe6B,EAAkB,QAC1DA,EAAkB,SAgBAjI,EAAS,cACTA,EAAS,WAAY0G,yHCmG7B,6EA0BA,2fAhEA,6EA4BA,ufAhDA,4UA5CA,6EAQA,6EAmBA,6pBAgFyC,6EAkBzC,6GArBMrR,KAAY,oHAKPA,KAAY,0RALjBA,KAAY,+EAKPA,KAAY,mgBAzCkB,6EAqBzC,qNAnBWA,KAAY,kVAAZA,KAAY,mgBAtBkB,kFAYzC,wpBA3DoC,unBAGE,oFACA,2JAFpB,MAArBA,KAAMuN,6LAAe,MAArBvN,KAAMuN,4QASsC,kFAET,+EAUhC,44BAKgC,+EAWhC,6VAZRtL,wZA7BCjC,KAAMkN,MAAQjB,GAAQkC,WA4CjBnO,KAAMkN,MAAQjB,GAAQ+B,UAoBtBhO,KAAMkN,MAAQjB,GAAQ6G,UAsCtB9S,KAAMkN,MAAQjB,GAAQ8G,4ZAvGH/S,KAAMkN,kJAANlN,KAAMkN,qfA7CjCsB,EAAW,EAEXwE,WAEEnC,MAAWK,SAQbtD,EAPJoF,EAAY,IACVtC,IAAKG,EAAKM,UACVR,MAAOE,EAAKC,WACZF,KAAMC,EAAKgC,qBAMPhF,EAAe3B,GAAOQ,WAAWe,OACjCG,KACEH,EAAEP,MAAQU,EAAMV,SAClBsB,EAAW,GAETf,EAAEP,MAAQjB,GAAQ6G,YACpBE,EAAY,IACVtC,IAAKG,EAAKM,UACVR,MAAOE,EAAKC,WACZF,KAAMC,EAAKgC,0BAEJpF,EAAEP,MAAQjB,GAAQ8G,kBACrBvF,EAAaC,EAAEH,MAAMY,MAAM+E,GAAMA,EAAE5F,KAAOI,EAAED,iBAClDwF,EAAY,GAAKxF,EAAW5K,YAC5BoQ,EAAY,GAAKxF,EAAWqD,YAGhCjD,EAAQH,MAGJK,EAAcC,IACdA,GACFA,IAEF7B,GAAOI,IAAXlN,OAAAmB,OAAAnB,OAAAmB,UAAoBqN,IAAOV,IAAKjB,GAAQkB,SAGtCvI,EAAUiJ,6CA9BPjD,EAASgD,EAAMV,MAAQjB,GAAQkB,0BAqCCqB,EAAW,WAGTA,EAAW,WACXA,EAAW,GAO5BrJ,OAAO6N,EAAY,GAAK7N,EAAEH,kBAEfwJ,EAAW,OAIhCV,cACQ0D,MAAa5D,EAAMR,OACnB8F,EAAS1B,EAAO2B,WAAW1F,GAAMA,EAAEJ,KAAOO,EAAML,aAChD6F,GAAY/F,GAAImE,EAAO0B,GAAQ7F,GAAIzK,KAAMoQ,EAAY,IAC3DxB,EAAOnH,OAAO6I,EAAQ,EAAGE,GACzBlH,GAAOI,QAASsB,EAAOR,MAAOoE,EAAQjE,WAAY6F,EAAQ/F,gBAMvCmB,EAAW,OAIhCV,cACQ0D,MAAa5D,EAAMR,OACzBoE,EAAOnH,OACLmH,EAAO2B,WAAW1F,GAAMA,EAAEJ,KAAOO,EAAML,aACvC,GAEFrB,GAAOI,QAASsB,EAAOR,MAAOoE,EAAQjE,WAAY,SAS1CpI,OAAO6N,EAAY,GAAK7N,EAAEH,cAKpC8I,cACQT,EAAKgG,KACXnH,GAAOI,QACFsB,EACHR,UAAWQ,EAAMR,OAASC,GAAAA,EAAIzK,KAAMoQ,EAAY,KAChDzF,WAAYF,OAUNlI,OAAO6N,EAAY,GAAK7N,EAAEH,kBAEYwJ,EAAW,OAI3DV,cACQT,EAAKgG,KACXnH,GAAOI,QACFsB,EACHN,UACKM,EAAMN,OAEPgG,OAAQ1F,EAAML,WACdF,GAAAA,EACAzK,KAAMoQ,EAAY,GAClBnC,KAAMmC,EAAY,GAClBO,MAAM,iBASE/E,EAAW,GACfrJ,QACZ6N,EAAY,GAAK7N,EAAEH,cACnBwJ,EAAW,IAUDrJ,OAAO6N,EAAY,GAAK7N,EAAEH,kBAEYwJ,EAAW,OAI3DV,cACQ0D,MAAa5D,EAAMN,OACnB4F,EAAS1B,EAAO2B,WAAW1F,GAAMA,EAAEJ,KAAOO,EAAMJ,aAChDgG,GACJF,OAAQ9B,EAAO0B,GAAQI,OACvBjG,GAAImE,EAAO0B,GAAQ7F,GACnBzK,KAAMoQ,EAAY,GAClBnC,KAAMmC,EAAY,GAClBO,MAAM,GAER/B,EAAOnH,OAAO6I,EAAQ,EAAGM,GACzBtH,GAAOI,QAASsB,EAAON,MAAOkE,eAMhBhD,EAAW,GACfrJ,QACZ6N,EAAY,GAAK7N,EAAEH,cACnBwJ,EAAW,QAxIQV,wNC1CjB9N,kPAVdiC,SACEJ,OAOEA,iEAEU7B,oEAbD+L,EAAQb,GAAgBW,+WCc5B7L,uIAFYA,KAAO,OAAS,mEALrCiC,SACEJ,yFAMO7B,wHAFYA,KAAO,OAAS,gQAVxBuT,WAEL5I,EAAW7F,gGAMb6F,EAAS,0NCZf1I,ojBC4GmBjC,MAAK4C,oFARRX,6EAQGjC,MAAK4C,sGAVF5C,MAAKuT,gLAALvT,MAAKuT,mNAjBRvT,KAAMmI,+BAAXlH,iKAFejB,oBAAqBA,+DADxCiC,mGAGSjC,KAAMmI,kBAAXlH,uHAAAA,4DAFejB,oBAAqBA,qGAEpCiB,4dALDyI,MAAM,wBAAXzI,yNAAKyI,MAAM,WAAXzI,+HAAAA,8DAAAA,iRA0CFgB,2KA3DCjC,KAAY0Q,SACZzF,GAAgBjL,KAAY2Q,YAC5B3Q,KAAY4Q,6hBAbnB3O,SACEJ,0BAEEA,oEAcFA,8GANK7B,KAAY0Q,kCACZzF,GAAgBjL,KAAY2Q,qCAC5B3Q,KAAY4Q,uaA9CbhD,EADAY,EAAW,QAETX,EAAe3B,GAAOQ,WAAWe,OAAOG,EAAQH,SAUlDgG,EARApC,GACFX,SAASQ,MAAOC,UAChBR,WAAWO,MAAOJ,WAClBF,UAAUM,MAAO2B,eAGfhI,EAAQ,EACRwD,EAAS,QAKP6D,OACJvD,uBACQ0D,EXUiB,CAAC1P,IAC1B,MAAM+Q,EAAgBC,iBAAiBhR,GACjC0P,EAAa1P,EAAQ+L,wBAS3B,MAAO,CAAE7D,OARMwH,EAAWxH,OACrB+I,WAAWF,EAAcG,aACtBD,WAAWF,EAAcI,gBAC7B,GAKYzF,QAJAgE,EAAWhE,QACtBuF,WAAWF,EAAcK,YACtBH,WAAWF,EAAcM,iBAC7B,KWpBiBC,CAAcR,OACjC5I,EAAQwH,EAAWxH,WACnBwD,EAASgE,EAAWhE,UACnB,KAGL7J,QACMiP,IACFvB,IACApH,OAAOpH,iBAAiB,SAAUwO,OAItCtN,EAAUiJ,6CAjBPP,EAAQM,EAAMN,MAAMnF,QAAQsF,GAAMA,EAAE6F,SAAW1F,EAAML,sCAsB/B8D,EAAcD,GAAOC,GAAc,YAGrDA,GACCX,SAASQ,MAAOC,UAChBR,WAAWO,MAAOJ,WAClBF,UAAUM,MAAO2B,wBAOCxB,EAAcD,GAAOC,EAAa,OAkB7B5D,IAAMX,KAAKa,UAAUF,EAAEoD,QAAU/D,KAAKa,UAAUyD,GAAOC,EAAanQ,EAAI,OAqBrFgL,GAAOI,QACFsB,EACHV,IAAKjB,GAAQ8G,WACbvF,WAAY0G,EAAK7G,eArBfmE,MAAa5D,EAAMN,OACnB4F,EAAS1B,EAAO2B,WAAW1F,GAAMA,EAAEJ,KAAO6G,EAAK7G,KAC/CmG,MAAeU,EAAMX,MAAOW,EAAKX,MACvC/B,EAAOnH,OAAO6I,EAAQ,EAAGM,GACzBtH,GAAOI,QAASsB,EAAON,MAAOkE,IAC9B7C,uBACQ6C,MAAa5D,EAAMN,OACzBkE,EAAOnH,OACLmH,EAAO2B,WAAW1F,GAAMA,EAAEJ,KAAO6G,EAAK7G,KACtC,GAEFnB,GAAOI,QAASsB,EAAON,MAAOkE,MAC7B,MA5BDrM,QACZqJ,EAAWrJ,EAAEH,QACkB,IAA3BjE,KAAKiO,IAAIR,EAAW,SACtB6C,EAAcD,GAAOC,EAAa7C,EAAW,QAC7CA,EAAW,SA4CItC,GAAOI,QAASsB,EAAOV,IAAKjB,GAAQ6G,kDAnD7BW,oLC5CbzT,8MADnBiC,mGACmBjC,kRAbbmU,GAAU,EAEd3P,QACM,kBAAmB4P,WACrBtJ,OAAOpH,iBAAiB,YACtB0Q,UAAUC,cAAcC,SAAS,4CAMpBH,GAAU,WAEeA,GAAU,WCnB5C,kEAAQ,CAChBrS,OAAQe,SAAS0R"}